# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_slvs', [dirname(__file__)])
        except ImportError:
            import _slvs
            return _slvs
        if fp is not None:
            try:
                _mod = imp.load_module('_slvs', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _slvs = swig_import_helper()
    del swig_import_helper
else:
    import _slvs
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SLVS_FREE_IN_3D = _slvs.SLVS_FREE_IN_3D
class lParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _slvs.lParam_h_set
    __swig_getmethods__["h"] = _slvs.lParam_h_get
    if _newclass:h = _swig_property(_slvs.lParam_h_get, _slvs.lParam_h_set)
    __swig_setmethods__["group"] = _slvs.lParam_group_set
    __swig_getmethods__["group"] = _slvs.lParam_group_get
    if _newclass:group = _swig_property(_slvs.lParam_group_get, _slvs.lParam_group_set)
    __swig_setmethods__["val"] = _slvs.lParam_val_set
    __swig_getmethods__["val"] = _slvs.lParam_val_get
    if _newclass:val = _swig_property(_slvs.lParam_val_get, _slvs.lParam_val_set)
    __swig_setmethods__["free"] = _slvs.lParam_free_set
    __swig_getmethods__["free"] = _slvs.lParam_free_get
    if _newclass:free = _swig_property(_slvs.lParam_free_get, _slvs.lParam_free_set)
    def __init__(self): 
        this = _slvs.new_lParam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _slvs.delete_lParam
    __del__ = lambda self : None;
lParam_swigregister = _slvs.lParam_swigregister
lParam_swigregister(lParam)

SLVS_E_POINT_IN_3D = _slvs.SLVS_E_POINT_IN_3D
SLVS_E_POINT_IN_2D = _slvs.SLVS_E_POINT_IN_2D
SLVS_E_NORMAL_IN_3D = _slvs.SLVS_E_NORMAL_IN_3D
SLVS_E_NORMAL_IN_2D = _slvs.SLVS_E_NORMAL_IN_2D
SLVS_E_DISTANCE = _slvs.SLVS_E_DISTANCE
SLVS_E_WORKPLANE = _slvs.SLVS_E_WORKPLANE
SLVS_E_LINE_SEGMENT = _slvs.SLVS_E_LINE_SEGMENT
SLVS_E_CUBIC = _slvs.SLVS_E_CUBIC
SLVS_E_CIRCLE = _slvs.SLVS_E_CIRCLE
SLVS_E_ARC_OF_CIRCLE = _slvs.SLVS_E_ARC_OF_CIRCLE
SLVS_E_TRANSFORM = _slvs.SLVS_E_TRANSFORM
class lEntity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lEntity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lEntity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _slvs.lEntity_h_set
    __swig_getmethods__["h"] = _slvs.lEntity_h_get
    if _newclass:h = _swig_property(_slvs.lEntity_h_get, _slvs.lEntity_h_set)
    __swig_setmethods__["group"] = _slvs.lEntity_group_set
    __swig_getmethods__["group"] = _slvs.lEntity_group_get
    if _newclass:group = _swig_property(_slvs.lEntity_group_get, _slvs.lEntity_group_set)
    __swig_setmethods__["type"] = _slvs.lEntity_type_set
    __swig_getmethods__["type"] = _slvs.lEntity_type_get
    if _newclass:type = _swig_property(_slvs.lEntity_type_get, _slvs.lEntity_type_set)
    __swig_setmethods__["wrkpl"] = _slvs.lEntity_wrkpl_set
    __swig_getmethods__["wrkpl"] = _slvs.lEntity_wrkpl_get
    if _newclass:wrkpl = _swig_property(_slvs.lEntity_wrkpl_get, _slvs.lEntity_wrkpl_set)
    __swig_setmethods__["point"] = _slvs.lEntity_point_set
    __swig_getmethods__["point"] = _slvs.lEntity_point_get
    if _newclass:point = _swig_property(_slvs.lEntity_point_get, _slvs.lEntity_point_set)
    __swig_setmethods__["normal"] = _slvs.lEntity_normal_set
    __swig_getmethods__["normal"] = _slvs.lEntity_normal_get
    if _newclass:normal = _swig_property(_slvs.lEntity_normal_get, _slvs.lEntity_normal_set)
    __swig_setmethods__["distance"] = _slvs.lEntity_distance_set
    __swig_getmethods__["distance"] = _slvs.lEntity_distance_get
    if _newclass:distance = _swig_property(_slvs.lEntity_distance_get, _slvs.lEntity_distance_set)
    __swig_setmethods__["param"] = _slvs.lEntity_param_set
    __swig_getmethods__["param"] = _slvs.lEntity_param_get
    if _newclass:param = _swig_property(_slvs.lEntity_param_get, _slvs.lEntity_param_set)
    __swig_setmethods__["src"] = _slvs.lEntity_src_set
    __swig_getmethods__["src"] = _slvs.lEntity_src_get
    if _newclass:src = _swig_property(_slvs.lEntity_src_get, _slvs.lEntity_src_set)
    __swig_setmethods__["scale"] = _slvs.lEntity_scale_set
    __swig_getmethods__["scale"] = _slvs.lEntity_scale_get
    if _newclass:scale = _swig_property(_slvs.lEntity_scale_get, _slvs.lEntity_scale_set)
    __swig_setmethods__["timesApplied"] = _slvs.lEntity_timesApplied_set
    __swig_getmethods__["timesApplied"] = _slvs.lEntity_timesApplied_get
    if _newclass:timesApplied = _swig_property(_slvs.lEntity_timesApplied_get, _slvs.lEntity_timesApplied_set)
    __swig_setmethods__["asTrans"] = _slvs.lEntity_asTrans_set
    __swig_getmethods__["asTrans"] = _slvs.lEntity_asTrans_get
    if _newclass:asTrans = _swig_property(_slvs.lEntity_asTrans_get, _slvs.lEntity_asTrans_set)
    __swig_setmethods__["asAxisAngle"] = _slvs.lEntity_asAxisAngle_set
    __swig_getmethods__["asAxisAngle"] = _slvs.lEntity_asAxisAngle_get
    if _newclass:asAxisAngle = _swig_property(_slvs.lEntity_asAxisAngle_get, _slvs.lEntity_asAxisAngle_set)
    def __init__(self): 
        this = _slvs.new_lEntity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _slvs.delete_lEntity
    __del__ = lambda self : None;
lEntity_swigregister = _slvs.lEntity_swigregister
lEntity_swigregister(lEntity)

SLVS_C_POINTS_COINCIDENT = _slvs.SLVS_C_POINTS_COINCIDENT
SLVS_C_PT_PT_DISTANCE = _slvs.SLVS_C_PT_PT_DISTANCE
SLVS_C_PT_PLANE_DISTANCE = _slvs.SLVS_C_PT_PLANE_DISTANCE
SLVS_C_PT_LINE_DISTANCE = _slvs.SLVS_C_PT_LINE_DISTANCE
SLVS_C_PT_FACE_DISTANCE = _slvs.SLVS_C_PT_FACE_DISTANCE
SLVS_C_PT_IN_PLANE = _slvs.SLVS_C_PT_IN_PLANE
SLVS_C_PT_ON_LINE = _slvs.SLVS_C_PT_ON_LINE
SLVS_C_PT_ON_FACE = _slvs.SLVS_C_PT_ON_FACE
SLVS_C_EQUAL_LENGTH_LINES = _slvs.SLVS_C_EQUAL_LENGTH_LINES
SLVS_C_LENGTH_RATIO = _slvs.SLVS_C_LENGTH_RATIO
SLVS_C_EQ_LEN_PT_LINE_D = _slvs.SLVS_C_EQ_LEN_PT_LINE_D
SLVS_C_EQ_PT_LN_DISTANCES = _slvs.SLVS_C_EQ_PT_LN_DISTANCES
SLVS_C_EQUAL_ANGLE = _slvs.SLVS_C_EQUAL_ANGLE
SLVS_C_EQUAL_LINE_ARC_LEN = _slvs.SLVS_C_EQUAL_LINE_ARC_LEN
SLVS_C_SYMMETRIC = _slvs.SLVS_C_SYMMETRIC
SLVS_C_SYMMETRIC_HORIZ = _slvs.SLVS_C_SYMMETRIC_HORIZ
SLVS_C_SYMMETRIC_VERT = _slvs.SLVS_C_SYMMETRIC_VERT
SLVS_C_SYMMETRIC_LINE = _slvs.SLVS_C_SYMMETRIC_LINE
SLVS_C_AT_MIDPOINT = _slvs.SLVS_C_AT_MIDPOINT
SLVS_C_HORIZONTAL = _slvs.SLVS_C_HORIZONTAL
SLVS_C_VERTICAL = _slvs.SLVS_C_VERTICAL
SLVS_C_DIAMETER = _slvs.SLVS_C_DIAMETER
SLVS_C_PT_ON_CIRCLE = _slvs.SLVS_C_PT_ON_CIRCLE
SLVS_C_SAME_ORIENTATION = _slvs.SLVS_C_SAME_ORIENTATION
SLVS_C_ANGLE = _slvs.SLVS_C_ANGLE
SLVS_C_PARALLEL = _slvs.SLVS_C_PARALLEL
SLVS_C_PERPENDICULAR = _slvs.SLVS_C_PERPENDICULAR
SLVS_C_ARC_LINE_TANGENT = _slvs.SLVS_C_ARC_LINE_TANGENT
SLVS_C_CUBIC_LINE_TANGENT = _slvs.SLVS_C_CUBIC_LINE_TANGENT
SLVS_C_EQUAL_RADIUS = _slvs.SLVS_C_EQUAL_RADIUS
SLVS_C_PROJ_PT_DISTANCE = _slvs.SLVS_C_PROJ_PT_DISTANCE
SLVS_C_WHERE_DRAGGED = _slvs.SLVS_C_WHERE_DRAGGED
SLVS_C_CURVE_CURVE_TANGENT = _slvs.SLVS_C_CURVE_CURVE_TANGENT
SLVS_C_LENGTH_DIFFERENCE = _slvs.SLVS_C_LENGTH_DIFFERENCE
class lConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lConstraint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _slvs.lConstraint_h_set
    __swig_getmethods__["h"] = _slvs.lConstraint_h_get
    if _newclass:h = _swig_property(_slvs.lConstraint_h_get, _slvs.lConstraint_h_set)
    __swig_setmethods__["group"] = _slvs.lConstraint_group_set
    __swig_getmethods__["group"] = _slvs.lConstraint_group_get
    if _newclass:group = _swig_property(_slvs.lConstraint_group_get, _slvs.lConstraint_group_set)
    __swig_setmethods__["type"] = _slvs.lConstraint_type_set
    __swig_getmethods__["type"] = _slvs.lConstraint_type_get
    if _newclass:type = _swig_property(_slvs.lConstraint_type_get, _slvs.lConstraint_type_set)
    __swig_setmethods__["wrkpl"] = _slvs.lConstraint_wrkpl_set
    __swig_getmethods__["wrkpl"] = _slvs.lConstraint_wrkpl_get
    if _newclass:wrkpl = _swig_property(_slvs.lConstraint_wrkpl_get, _slvs.lConstraint_wrkpl_set)
    __swig_setmethods__["valA"] = _slvs.lConstraint_valA_set
    __swig_getmethods__["valA"] = _slvs.lConstraint_valA_get
    if _newclass:valA = _swig_property(_slvs.lConstraint_valA_get, _slvs.lConstraint_valA_set)
    __swig_setmethods__["ptA"] = _slvs.lConstraint_ptA_set
    __swig_getmethods__["ptA"] = _slvs.lConstraint_ptA_get
    if _newclass:ptA = _swig_property(_slvs.lConstraint_ptA_get, _slvs.lConstraint_ptA_set)
    __swig_setmethods__["ptB"] = _slvs.lConstraint_ptB_set
    __swig_getmethods__["ptB"] = _slvs.lConstraint_ptB_get
    if _newclass:ptB = _swig_property(_slvs.lConstraint_ptB_get, _slvs.lConstraint_ptB_set)
    __swig_setmethods__["entityA"] = _slvs.lConstraint_entityA_set
    __swig_getmethods__["entityA"] = _slvs.lConstraint_entityA_get
    if _newclass:entityA = _swig_property(_slvs.lConstraint_entityA_get, _slvs.lConstraint_entityA_set)
    __swig_setmethods__["entityB"] = _slvs.lConstraint_entityB_set
    __swig_getmethods__["entityB"] = _slvs.lConstraint_entityB_get
    if _newclass:entityB = _swig_property(_slvs.lConstraint_entityB_get, _slvs.lConstraint_entityB_set)
    __swig_setmethods__["entityC"] = _slvs.lConstraint_entityC_set
    __swig_getmethods__["entityC"] = _slvs.lConstraint_entityC_get
    if _newclass:entityC = _swig_property(_slvs.lConstraint_entityC_get, _slvs.lConstraint_entityC_set)
    __swig_setmethods__["entityD"] = _slvs.lConstraint_entityD_set
    __swig_getmethods__["entityD"] = _slvs.lConstraint_entityD_get
    if _newclass:entityD = _swig_property(_slvs.lConstraint_entityD_get, _slvs.lConstraint_entityD_set)
    __swig_setmethods__["other"] = _slvs.lConstraint_other_set
    __swig_getmethods__["other"] = _slvs.lConstraint_other_get
    if _newclass:other = _swig_property(_slvs.lConstraint_other_get, _slvs.lConstraint_other_set)
    __swig_setmethods__["other2"] = _slvs.lConstraint_other2_set
    __swig_getmethods__["other2"] = _slvs.lConstraint_other2_get
    if _newclass:other2 = _swig_property(_slvs.lConstraint_other2_get, _slvs.lConstraint_other2_set)
    def __init__(self): 
        this = _slvs.new_lConstraint()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _slvs.delete_lConstraint
    __del__ = lambda self : None;
lConstraint_swigregister = _slvs.lConstraint_swigregister
lConstraint_swigregister(lConstraint)


def lQuaternionU(*args):
  return _slvs.lQuaternionU(*args)
lQuaternionU = _slvs.lQuaternionU

def lQuaternionV(*args):
  return _slvs.lQuaternionV(*args)
lQuaternionV = _slvs.lQuaternionV

def lQuaternionN(*args):
  return _slvs.lQuaternionN(*args)
lQuaternionN = _slvs.lQuaternionN

def lMakeQuaternion(*args):
  return _slvs.lMakeQuaternion(*args)
lMakeQuaternion = _slvs.lMakeQuaternion

def lMakeParam(*args):
  return _slvs.lMakeParam(*args)
lMakeParam = _slvs.lMakeParam

def lMakePoint2d(*args):
  return _slvs.lMakePoint2d(*args)
lMakePoint2d = _slvs.lMakePoint2d

def lMakePoint3d(*args):
  return _slvs.lMakePoint3d(*args)
lMakePoint3d = _slvs.lMakePoint3d

def lMakeNormal3d(*args):
  return _slvs.lMakeNormal3d(*args)
lMakeNormal3d = _slvs.lMakeNormal3d

def lMakeNormal2d(*args):
  return _slvs.lMakeNormal2d(*args)
lMakeNormal2d = _slvs.lMakeNormal2d

def lMakeDistance(*args):
  return _slvs.lMakeDistance(*args)
lMakeDistance = _slvs.lMakeDistance

def lMakeLineSegment(*args):
  return _slvs.lMakeLineSegment(*args)
lMakeLineSegment = _slvs.lMakeLineSegment

def lMakeCubic(*args):
  return _slvs.lMakeCubic(*args)
lMakeCubic = _slvs.lMakeCubic

def lMakeArcOfCircle(*args):
  return _slvs.lMakeArcOfCircle(*args)
lMakeArcOfCircle = _slvs.lMakeArcOfCircle

def lMakeCircle(*args):
  return _slvs.lMakeCircle(*args)
lMakeCircle = _slvs.lMakeCircle

def lMakeWorkplane(*args):
  return _slvs.lMakeWorkplane(*args)
lMakeWorkplane = _slvs.lMakeWorkplane

def lMakeTransform(*args):
  return _slvs.lMakeTransform(*args)
lMakeTransform = _slvs.lMakeTransform

def lMakeConstraint(*args):
  return _slvs.lMakeConstraint(*args)
lMakeConstraint = _slvs.lMakeConstraint
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _slvs.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _slvs.SwigPyIterator_value(self)
    def incr(self, n=1): return _slvs.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _slvs.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _slvs.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _slvs.SwigPyIterator_equal(self, *args)
    def copy(self): return _slvs.SwigPyIterator_copy(self)
    def next(self): return _slvs.SwigPyIterator_next(self)
    def __next__(self): return _slvs.SwigPyIterator___next__(self)
    def previous(self): return _slvs.SwigPyIterator_previous(self)
    def advance(self, *args): return _slvs.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _slvs.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _slvs.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _slvs.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _slvs.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _slvs.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _slvs.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _slvs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Vec_hConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_hConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_hConstraint, name)
    __repr__ = _swig_repr
    def iterator(self): return _slvs.Vec_hConstraint_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _slvs.Vec_hConstraint___nonzero__(self)
    def __bool__(self): return _slvs.Vec_hConstraint___bool__(self)
    def __len__(self): return _slvs.Vec_hConstraint___len__(self)
    def pop(self): return _slvs.Vec_hConstraint_pop(self)
    def __getslice__(self, *args): return _slvs.Vec_hConstraint___getslice__(self, *args)
    def __setslice__(self, *args): return _slvs.Vec_hConstraint___setslice__(self, *args)
    def __delslice__(self, *args): return _slvs.Vec_hConstraint___delslice__(self, *args)
    def __delitem__(self, *args): return _slvs.Vec_hConstraint___delitem__(self, *args)
    def __getitem__(self, *args): return _slvs.Vec_hConstraint___getitem__(self, *args)
    def __setitem__(self, *args): return _slvs.Vec_hConstraint___setitem__(self, *args)
    def append(self, *args): return _slvs.Vec_hConstraint_append(self, *args)
    def empty(self): return _slvs.Vec_hConstraint_empty(self)
    def size(self): return _slvs.Vec_hConstraint_size(self)
    def clear(self): return _slvs.Vec_hConstraint_clear(self)
    def swap(self, *args): return _slvs.Vec_hConstraint_swap(self, *args)
    def get_allocator(self): return _slvs.Vec_hConstraint_get_allocator(self)
    def begin(self): return _slvs.Vec_hConstraint_begin(self)
    def end(self): return _slvs.Vec_hConstraint_end(self)
    def rbegin(self): return _slvs.Vec_hConstraint_rbegin(self)
    def rend(self): return _slvs.Vec_hConstraint_rend(self)
    def pop_back(self): return _slvs.Vec_hConstraint_pop_back(self)
    def erase(self, *args): return _slvs.Vec_hConstraint_erase(self, *args)
    def __init__(self, *args): 
        this = _slvs.new_Vec_hConstraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _slvs.Vec_hConstraint_push_back(self, *args)
    def front(self): return _slvs.Vec_hConstraint_front(self)
    def back(self): return _slvs.Vec_hConstraint_back(self)
    def assign(self, *args): return _slvs.Vec_hConstraint_assign(self, *args)
    def resize(self, *args): return _slvs.Vec_hConstraint_resize(self, *args)
    def insert(self, *args): return _slvs.Vec_hConstraint_insert(self, *args)
    def reserve(self, *args): return _slvs.Vec_hConstraint_reserve(self, *args)
    def capacity(self): return _slvs.Vec_hConstraint_capacity(self)
    __swig_destroy__ = _slvs.delete_Vec_hConstraint
    __del__ = lambda self : None;
Vec_hConstraint_swigregister = _slvs.Vec_hConstraint_swigregister
Vec_hConstraint_swigregister(Vec_hConstraint)

class System(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, System, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, System, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Failed"] = _slvs.System_Failed_get
    if _newclass:Failed = _swig_property(_slvs.System_Failed_get)
    __swig_setmethods__["GroupHandle"] = _slvs.System_GroupHandle_set
    __swig_getmethods__["GroupHandle"] = _slvs.System_GroupHandle_get
    if _newclass:GroupHandle = _swig_property(_slvs.System_GroupHandle_get, _slvs.System_GroupHandle_set)
    __swig_setmethods__["ParamHandle"] = _slvs.System_ParamHandle_set
    __swig_getmethods__["ParamHandle"] = _slvs.System_ParamHandle_get
    if _newclass:ParamHandle = _swig_property(_slvs.System_ParamHandle_get, _slvs.System_ParamHandle_set)
    __swig_setmethods__["EntityHandle"] = _slvs.System_EntityHandle_set
    __swig_getmethods__["EntityHandle"] = _slvs.System_EntityHandle_get
    if _newclass:EntityHandle = _swig_property(_slvs.System_EntityHandle_get, _slvs.System_EntityHandle_set)
    __swig_setmethods__["ConstraintHandle"] = _slvs.System_ConstraintHandle_set
    __swig_getmethods__["ConstraintHandle"] = _slvs.System_ConstraintHandle_get
    if _newclass:ConstraintHandle = _swig_property(_slvs.System_ConstraintHandle_get, _slvs.System_ConstraintHandle_set)
    __swig_getmethods__["Dof"] = _slvs.System_Dof_get
    if _newclass:Dof = _swig_property(_slvs.System_Dof_get)
    def __init__(self): 
        this = _slvs.new_System()
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return _slvs.System_reset(self)
    def solve(self, group=0, reportFailed=False, findFreeParams=False): return _slvs.System_solve(self, group, reportFailed, findFreeParams)
    def getParam(self, *args): return _slvs.System_getParam(self, *args)
    def removeParam(self, *args): return _slvs.System_removeParam(self, *args)
    def addParam(self, *args): return _slvs.System_addParam(self, *args)
    def getConstraint(self, *args): return _slvs.System_getConstraint(self, *args)
    def removeConstraint(self, *args): return _slvs.System_removeConstraint(self, *args)
    def addConstraint(self, *args): return _slvs.System_addConstraint(self, *args)
    def getEntity(self, *args): return _slvs.System_getEntity(self, *args)
    def removeEntity(self, *args): return _slvs.System_removeEntity(self, *args)
    def addEntity(self, *args): return _slvs.System_addEntity(self, *args)
    def getEntityParam(self, *args): return _slvs.System_getEntityParam(self, *args)
    def setEntityParam(self, *args): return _slvs.System_setEntityParam(self, *args)
    def getEntityPoint(self, *args): return _slvs.System_getEntityPoint(self, *args)
    def setEntityPoint(self, *args): return _slvs.System_setEntityPoint(self, *args)
    def addParamV(self, *args): return _slvs.System_addParamV(self, *args)
    def addPoint2d(self, *args): return _slvs.System_addPoint2d(self, *args)
    def addPoint2dV(self, *args): return _slvs.System_addPoint2dV(self, *args)
    def addPoint3d(self, *args): return _slvs.System_addPoint3d(self, *args)
    def addPoint3dV(self, *args): return _slvs.System_addPoint3dV(self, *args)
    def addNormal3d(self, *args): return _slvs.System_addNormal3d(self, *args)
    def addNormal3dV(self, *args): return _slvs.System_addNormal3dV(self, *args)
    def addNormal2d(self, *args): return _slvs.System_addNormal2d(self, *args)
    def addDistance(self, *args): return _slvs.System_addDistance(self, *args)
    def addDistanceV(self, *args): return _slvs.System_addDistanceV(self, *args)
    def addLineSegment(self, *args): return _slvs.System_addLineSegment(self, *args)
    def addCubic(self, *args): return _slvs.System_addCubic(self, *args)
    def addArcOfCircle(self, *args): return _slvs.System_addArcOfCircle(self, *args)
    def addCircle(self, *args): return _slvs.System_addCircle(self, *args)
    def addCircleV(self, *args): return _slvs.System_addCircleV(self, *args)
    def addWorkplane(self, *args): return _slvs.System_addWorkplane(self, *args)
    def addTransform(self, *args): return _slvs.System_addTransform(self, *args)
    def addTranslate(self, *args): return _slvs.System_addTranslate(self, *args)
    def addConstraintV(self, *args): return _slvs.System_addConstraintV(self, *args)
    def addPointsDistance(self, *args): return _slvs.System_addPointsDistance(self, *args)
    def addPointsProjectDistance(self, *args): return _slvs.System_addPointsProjectDistance(self, *args)
    def addPointsCoincident(self, *args): return _slvs.System_addPointsCoincident(self, *args)
    def addPointPlaneDistance(self, *args): return _slvs.System_addPointPlaneDistance(self, *args)
    def addPointLineDistance(self, *args): return _slvs.System_addPointLineDistance(self, *args)
    def addPointInPlane(self, *args): return _slvs.System_addPointInPlane(self, *args)
    def addPointOnLine(self, *args): return _slvs.System_addPointOnLine(self, *args)
    def addEqualLength(self, *args): return _slvs.System_addEqualLength(self, *args)
    def addLengthRatio(self, *args): return _slvs.System_addLengthRatio(self, *args)
    def addLengthDifference(self, *args): return _slvs.System_addLengthDifference(self, *args)
    def addEqualLengthPointLineDistance(self, *args): return _slvs.System_addEqualLengthPointLineDistance(self, *args)
    def addEqualPointLineDistance(self, *args): return _slvs.System_addEqualPointLineDistance(self, *args)
    def addEqualAngle(self, *args): return _slvs.System_addEqualAngle(self, *args)
    def addEqualLineArcLength(self, *args): return _slvs.System_addEqualLineArcLength(self, *args)
    def addSymmetric(self, *args): return _slvs.System_addSymmetric(self, *args)
    def addSymmetricHorizontal(self, *args): return _slvs.System_addSymmetricHorizontal(self, *args)
    def addSymmetricVertical(self, *args): return _slvs.System_addSymmetricVertical(self, *args)
    def addSymmetricLine(self, *args): return _slvs.System_addSymmetricLine(self, *args)
    def addMidPoint(self, *args): return _slvs.System_addMidPoint(self, *args)
    def addPointsHorizontal(self, *args): return _slvs.System_addPointsHorizontal(self, *args)
    def addPointsVertical(self, *args): return _slvs.System_addPointsVertical(self, *args)
    def addLineHorizontal(self, *args): return _slvs.System_addLineHorizontal(self, *args)
    def addLineVertical(self, *args): return _slvs.System_addLineVertical(self, *args)
    def addDiameter(self, *args): return _slvs.System_addDiameter(self, *args)
    def addPointOnCircle(self, *args): return _slvs.System_addPointOnCircle(self, *args)
    def addSameOrientation(self, *args): return _slvs.System_addSameOrientation(self, *args)
    def addAngle(self, *args): return _slvs.System_addAngle(self, *args)
    def addPerpendicular(self, *args): return _slvs.System_addPerpendicular(self, *args)
    def addParallel(self, *args): return _slvs.System_addParallel(self, *args)
    def addArcLineTangent(self, *args): return _slvs.System_addArcLineTangent(self, *args)
    def addCubicLineTangent(self, *args): return _slvs.System_addCubicLineTangent(self, *args)
    def addCurvesTangent(self, *args): return _slvs.System_addCurvesTangent(self, *args)
    def addEqualRadius(self, *args): return _slvs.System_addEqualRadius(self, *args)
    def addWhereDragged(self, *args): return _slvs.System_addWhereDragged(self, *args)
    __swig_destroy__ = _slvs.delete_System
    __del__ = lambda self : None;
System_swigregister = _slvs.System_swigregister
System_swigregister(System)

# This file is compatible with both classic and new-style classes.


